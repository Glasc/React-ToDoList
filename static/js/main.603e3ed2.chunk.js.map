{"version":3,"sources":["features/counter/counterAPI.ts","features/counter/counterSlice.ts","Home/Todo/todoSlice.ts","store/store.ts","store/hooks.ts","Home/Todo/Items/Item.tsx","Home/Todo/Items/Items.tsx","Home/ui/H1.tsx","Home/Todo/BottomNav/BottomNav.tsx","Home/Todo/Todo.tsx","Home/Home.tsx","index.tsx","Home/Todo/BottomNav/BottomNav.module.css","Home/Todo/Items/Item.module.css","Home/Home.module.css","Home/Todo/Todo.module.css","Home/Todo/Items/Items.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","todoSlice","isSearching","customItems","items","checkItem","id","current","map","currItem","isChecked","addItem","text","isEditing","deleteItem","filter","toggleEdit","updateItem","newText","showAllItems","showActiveItems","showCompleteItems","searchItems","word","includes","toggleIsSearching","loadItems","restoreEditing","selectItems","todo","selectCustomItems","selectIsSearching","store","configureStore","reducer","counter","counterReducer","todoReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Item","dispatch","editRef","useRef","useState","editing","setEditing","useEffect","focus","className","styles","item","style","width","onSubmit","e","preventDefault","ref","variant","onChange","target","marginTop","marginBottom","itemChecked","itemIcons","icon","Edit","isDisabled","size","colorScheme","onClick","Delete","Items","React","memo","itemsContainer","H1","children","textAlign","fontSize","fontWeight","BottomNav","searchInput","setSearchInput","inputRef","buttonContainer","leftSection","ArrowBack","color","borderRadius","Search","paddingLeft","span","length","rightSection","Todo","defaultHeadText","inputText","setInputText","headText","setHeadText","JSON","parse","localStorage","getItem","setItem","stringify","todoContainer","parseInt","Date","getTime","toString","clearTimeout","placeholder","bg","focusBorderColor","border","Home","container","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.603e3ed2.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../store/store'\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } =\n  counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { RootState } from '../../store/store'\r\nimport { ItemInterface, modeType } from '../../shared/types'\r\nimport { createSlice, current, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ninterface todoState {\r\n  isSearching: boolean\r\n  customItems: ItemInterface[] | []\r\n  items: ItemInterface[]\r\n}\r\n\r\nconst initialState: todoState = {\r\n  isSearching: false,\r\n  customItems: [],\r\n  items: [\r\n    // {\r\n    //   id: 1442342,\r\n    //   text: 'hello',\r\n    //   isChecked: true,\r\n    //   isEditing: false,\r\n    // },\r\n    // {\r\n    //   id: 123212,\r\n    //   text: 'hello2',\r\n    //   isChecked: false,\r\n    //   isEditing: false,\r\n    // },\r\n  ],\r\n}\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    checkItem: (state, action: PayloadAction<{ id: number }>) => {\r\n      const { id } = action.payload\r\n      state.items = current(state).items.map(\r\n        (currItem: ItemInterface) => {\r\n          if (currItem.id === id) {\r\n            currItem = { ...currItem, isChecked: !currItem.isChecked }\r\n          }\r\n          return currItem\r\n        }\r\n      )\r\n    },\r\n    addItem: (\r\n      state,\r\n      action: PayloadAction<{ id: number; text: string }>\r\n    ) => {\r\n      const { id, text } = action.payload\r\n      state.items = [\r\n        { id, text, isChecked: false, isEditing: false },\r\n        ...current(state).items,\r\n      ]\r\n    },\r\n    deleteItem: (state, action: PayloadAction<{ id: number }>) => {\r\n      const { id } = action.payload\r\n      state.items = current(state).items.filter((currItem) => {\r\n        if (currItem.id !== id) return true\r\n        return false\r\n      })\r\n    },\r\n    toggleEdit: (state, action: PayloadAction<{ id: number }>) => {\r\n      const { id } = action.payload\r\n      state.items = current(state).items.map(\r\n        (currItem: ItemInterface) => {\r\n          if (currItem.id === id) {\r\n            currItem = { ...currItem, isEditing: !currItem.isEditing }\r\n          }\r\n          return currItem\r\n        }\r\n      )\r\n    },\r\n    updateItem: (\r\n      state,\r\n      action: PayloadAction<{ id: number; newText: string }>\r\n    ) => {\r\n      const { id, newText } = action.payload\r\n      state.items = current(state).items.map(\r\n        (currItem: ItemInterface) => {\r\n          if (currItem.id === id) {\r\n            currItem = { ...currItem, text: newText }\r\n          }\r\n          return currItem\r\n        }\r\n      )\r\n    },\r\n    showAllItems: (state) => {\r\n      state.customItems = current(state).items\r\n    },\r\n    showActiveItems: (state) => {\r\n      state.customItems = current(state).items.filter((currItem) => {\r\n        if (!currItem.isChecked) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n    },\r\n    showCompleteItems: (state) => {\r\n      state.customItems = current(state).items.filter((currItem) => {\r\n        if (currItem.isChecked) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n    },\r\n    searchItems: (state, action: PayloadAction<{ word: string }>) => {\r\n      state.customItems = current(state).items.filter((currItem) => {\r\n        const { word } = action.payload\r\n        if (currItem.text.includes(word)) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n    },\r\n    toggleIsSearching: (state) => {\r\n      state.isSearching = !current(state).isSearching\r\n    },\r\n    loadItems: (\r\n      state,\r\n      action: PayloadAction<ItemInterface[] | []>\r\n    ) => {\r\n      state.items = action.payload\r\n    },\r\n    restoreEditing: (state) => {\r\n      state.items = current(state).items.map((currItem) => {\r\n        currItem = { ...currItem, isEditing: false }\r\n        return currItem\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\nexport const {\r\n  checkItem,\r\n  addItem,\r\n  deleteItem,\r\n  toggleEdit,\r\n  updateItem,\r\n  showAllItems,\r\n  showActiveItems,\r\n  showCompleteItems,\r\n  toggleIsSearching,\r\n  searchItems,\r\n  loadItems,\r\n  restoreEditing,\r\n} = todoSlice.actions\r\n\r\nexport const selectItems = (state: RootState) => state.todo.items\r\nexport const selectCustomItems = (state: RootState) =>\r\n  state.todo.customItems\r\nexport const selectIsSearching = (state: RootState) =>\r\n  state.todo.isSearching\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n// export const selectTodos = (state: RootState) => state.todo.items\r\n\r\nexport default todoSlice.reducer\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport counterReducer from '../features/counter/counterSlice'\r\nimport todoReducer from '../Home/Todo/todoSlice'\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo: todoReducer,\r\n  },\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport { Checkbox } from '@chakra-ui/checkbox'\r\nimport { IconButton } from '@chakra-ui/button'\r\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons'\r\nimport styles from './Item.module.css'\r\nimport { useAppDispatch, useAppSelector } from '../../../store/hooks';\r\nimport {\r\n  checkItem,\r\n  deleteItem,\r\n  toggleEdit,\r\n  updateItem,\r\n} from '../todoSlice'\r\nimport { ItemInterface, modeType } from '../../../shared/types'\r\nimport { Input } from '@chakra-ui/input'\r\nimport { selectIsSearching } from '../todoSlice';\r\n\r\nexport const Item: React.FC<ItemInterface> = ({\r\n  id,\r\n  isChecked,\r\n  isEditing,\r\n  text,\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isSearching: boolean = useAppSelector(selectIsSearching)\r\n\r\n  const editRef = useRef<any>(null)\r\n\r\n  const [editing, setEditing] = useState<string>(text)\r\n\r\n  const handleDelete = (): void => {\r\n    dispatch(deleteItem({ id }))\r\n  }\r\n\r\n  const handleEditClick = (): void => {\r\n    dispatch(toggleEdit({ id }))\r\n    dispatch(updateItem({ id, newText: editing }))\r\n  }\r\n\r\n  const handleEditingChange = (e: any): void => {\r\n    setEditing(e.target.value)\r\n  }\r\n\r\n  const handleEditingSubmit = (e: any): void => {\r\n    e.preventDefault()\r\n    dispatch(toggleEdit({ id }))\r\n    dispatch(updateItem({ id, newText: editing }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      editRef.current.focus()\r\n    } \r\n  }, [isEditing])\r\n\r\n  return (\r\n    <div className={styles.item}>\r\n      {isEditing ? (\r\n        <form\r\n          style={{ width: '100%' }}\r\n          onSubmit={handleEditingSubmit}\r\n        >\r\n          <Input\r\n            ref={editRef}\r\n            variant='flushed'\r\n            width='90%'\r\n            value={editing}\r\n            onChange={handleEditingChange}\r\n          />\r\n        </form>\r\n      ) : (\r\n        <Checkbox\r\n          marginTop='0.3em'\r\n          marginBottom='0.3em'\r\n          isChecked={isChecked}\r\n          onChange={() => dispatch(checkItem({ id }))}\r\n        >\r\n          <span className={isChecked ? styles.itemChecked : ''}>\r\n            {text}\r\n          </span>\r\n        </Checkbox>\r\n      )}\r\n      <div className={styles.itemIcons}>\r\n        <IconButton\r\n          icon={<EditIcon />}\r\n          aria-label=''\r\n          isDisabled={isSearching}\r\n          size='sm'\r\n          variant='outline'\r\n          colorScheme='yellow'\r\n          onClick={handleEditClick}\r\n        />\r\n        <IconButton\r\n          icon={<DeleteIcon />}\r\n          aria-label=''\r\n          size='sm'\r\n          variant='outline'\r\n          colorScheme='pink'\r\n          onClick={handleDelete}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport styles from './Items.module.css'\r\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\r\nimport {\r\n  selectItems,\r\n  selectCustomItems,\r\n  showAllItems,\r\n  restoreEditing,\r\n} from '../todoSlice'\r\nimport { ItemInterface, modeType } from '../../../shared/types'\r\nimport { Item } from './Item'\r\n\r\ninterface ItemsProps {}\r\n\r\nexport const Items: React.FC<ItemsProps> = React.memo(({}) => {\r\n  const items = useAppSelector(selectItems)\r\n  const customItems: ItemInterface[] =\r\n    useAppSelector(selectCustomItems)\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(restoreEditing())\r\n  // }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    dispatch(showAllItems())\r\n  }, [items, dispatch])\r\n\r\n  return (\r\n    <div className={styles.itemsContainer}>\r\n      {customItems.map((item: ItemInterface) => {\r\n        return (\r\n          <Item\r\n            id={item.id}\r\n            key={item.id}\r\n            isChecked={item.isChecked}\r\n            isEditing={item.isEditing}\r\n            text={item.text}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n})\r\n","import React from 'react'\r\n\r\ninterface H1Props {}\r\n\r\nexport const H1: React.FC<H1Props> = ({ children }) => {\r\n  return (\r\n    <h1\r\n      style={{\r\n        textAlign: 'center',\r\n        fontSize: '2rem',\r\n        fontWeight: 'bold',\r\n      }}\r\n    >\r\n      {children}\r\n    </h1>\r\n  )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  HamburgerIcon,\r\n  SearchIcon,\r\n} from '@chakra-ui/icons'\r\nimport { Button, IconButton } from '@chakra-ui/button'\r\nimport styles from './BottomNav.module.css'\r\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks'\r\nimport {\r\n  selectItems,\r\n  showActiveItems,\r\n  showAllItems,\r\n  showCompleteItems,\r\n  selectCustomItems,\r\n  selectIsSearching,\r\n  toggleIsSearching,\r\n  searchItems,\r\n  restoreEditing,\r\n} from '../todoSlice'\r\nimport { ItemInterface } from '../../../shared/types'\r\nimport { Input, InputProps } from '@chakra-ui/input'\r\nimport { ComponentWithAs } from '@chakra-ui/system'\r\n\r\ninterface BottomNavProps {}\r\n\r\nexport const BottomNav: React.FC<BottomNavProps> = React.memo(\r\n  ({}) => {\r\n    const customItems: ItemInterface[] =\r\n      useAppSelector(selectCustomItems)\r\n\r\n    const [searchInput, setSearchInput] = useState<string>('')\r\n\r\n    const isSearching = useAppSelector(selectIsSearching)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleAll = (): void => {\r\n      dispatch(showAllItems())\r\n    }\r\n    const handleActive = (): void => {\r\n      dispatch(showActiveItems())\r\n    }\r\n\r\n    const handleComplete = (): void => {\r\n      dispatch(showCompleteItems())\r\n    }\r\n\r\n    const handleSearch = (): void => {\r\n      dispatch(toggleIsSearching())\r\n      dispatch(restoreEditing())\r\n    }\r\n\r\n    const handleSearchInput = (e: any): void => {\r\n      setSearchInput(e.target.value)\r\n    }\r\n\r\n    const handleGoBack = (e: any): void => {\r\n      dispatch(toggleIsSearching())\r\n      dispatch(restoreEditing())\r\n      setSearchInput('')\r\n    }\r\n\r\n    const inputRef = useRef<any>(null)\r\n\r\n    useEffect(() => {\r\n      dispatch(searchItems({ word: searchInput }))\r\n    }, [searchInput, dispatch])\r\n\r\n    useEffect(() => {\r\n      if (isSearching) {\r\n        inputRef.current.focus()\r\n\r\n      }\r\n    }, [isSearching])\r\n\r\n    return (\r\n      <footer className={styles.buttonContainer}>\r\n        <section className={styles.leftSection}>\r\n          {isSearching ? (\r\n            <IconButton\r\n              icon={<ArrowBackIcon />}\r\n              aria-label=''\r\n              size='sm'\r\n              color='black'\r\n              borderRadius='0'\r\n              onClick={handleGoBack}\r\n            />\r\n          ) : (\r\n            <IconButton\r\n              icon={<SearchIcon />}\r\n              aria-label=''\r\n              size='sm'\r\n              color='black'\r\n              borderRadius='0'\r\n              onClick={handleSearch}\r\n            />\r\n          )}\r\n\r\n          {isSearching ? (\r\n            <form style={{ width: '100%' }}>\r\n              <Input\r\n                variant='filled'\r\n                borderRadius='0'\r\n                color='black'\r\n                paddingLeft='9px'\r\n                ref={inputRef}\r\n                value={searchInput}\r\n                onChange={handleSearchInput}\r\n              />\r\n            </form>\r\n          ) : (\r\n            <span className={styles.span}>\r\n              | {customItems.length} items left\r\n            </span>\r\n          )}\r\n        </section>\r\n        <section className={styles.rightSection}>\r\n          <Button\r\n            size='sm'\r\n            colorScheme='pink'\r\n            variant='ghost'\r\n            onClick={handleAll}\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            size='sm'\r\n            colorScheme='pink'\r\n            variant='ghost'\r\n            onClick={handleActive}\r\n          >\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='sm'\r\n            colorScheme='pink'\r\n            variant='ghost'\r\n            onClick={handleComplete}\r\n          >\r\n            Complete\r\n          </Button>\r\n        </section>\r\n      </footer>\r\n    )\r\n  }\r\n)\r\n","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Input } from '@chakra-ui/input'\r\nimport styles from './Todo.module.css'\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\r\nimport {\r\n  addItem,\r\n  loadItems,\r\n  restoreEditing,\r\n  selectItems,\r\n} from './todoSlice'\r\nimport { Items } from './Items/Items'\r\nimport { H1 } from '../ui/H1'\r\nimport { BottomNav } from './BottomNav/BottomNav'\r\nimport { modeType, ItemInterface } from '../../shared/types'\r\n\r\ninterface TodoProps {}\r\n\r\nexport const Todo: React.FC<TodoProps> = ({}) => {\r\n  const dispatch = useAppDispatch()\r\n  const items: ItemInterface[] = useAppSelector(selectItems)\r\n  const defaultHeadText: string = 'THINGS TO DO'\r\n\r\n  const [inputText, setInputText] = useState<string>('')\r\n  const [headText, setHeadText] = useState<string>(defaultHeadText)\r\n\r\n  const handleInputTextChange = (\r\n    e: ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setInputText(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault()\r\n    if (inputText && inputText.length > 3) {\r\n      dispatch(\r\n        addItem({\r\n          id: parseInt(new Date().getTime().toString()),\r\n          text: inputText,\r\n        })\r\n      )\r\n      setInputText('')\r\n    } else {\r\n      setHeadText('You need more than 3 letters.')\r\n      setTimeout(() => {\r\n        setHeadText(defaultHeadText)\r\n      }, 3000)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      loadItems(JSON.parse(localStorage.getItem('items') || '[]'))\r\n    )\r\n    dispatch(restoreEditing())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('items', JSON.stringify(items))\r\n  }, [items])\r\n\r\n  return (\r\n    <div className={styles.todoContainer}>\r\n      <H1>{headText}</H1>\r\n      <form onSubmit={handleSubmit}>\r\n        <Input\r\n          placeholder='Add New'\r\n          variant='outline'\r\n          bg={'#171923'}\r\n          focusBorderColor='#B83280'\r\n          border='none'\r\n          marginTop='1em'\r\n          marginBottom='1em'\r\n          onChange={handleInputTextChange}\r\n          value={inputText}\r\n        />\r\n      </form>\r\n      <Items />\r\n      <BottomNav />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styles from './Home.module.css'\r\nimport { Todo } from './Todo/Todo'\r\n\r\nexport const Home = () => {\r\n    return <div className={styles.container}>\r\n        <Todo />\r\n    </div>\r\n}","import ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { Home } from './Home'\n\nReactDOM.render(\n  <ChakraProvider>\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  </ChakraProvider>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftSection\":\"BottomNav_leftSection__xkQZQ\",\"rightSection\":\"BottomNav_rightSection__LOiGz\",\"buttonContainer\":\"BottomNav_buttonContainer__2C_3R\",\"span\":\"BottomNav_span__RlnYF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Item_item__dhZkZ\",\"itemIcons\":\"Item_itemIcons__loj77\",\"itemChecked\":\"Item_itemChecked__39HP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__2d4Hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoContainer\":\"Todo_todoContainer__122w7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsContainer\":\"Items_itemsContainer__1LCsd\"};"],"sourceRoot":""}